#!/bin/sh

# =========================================================================
#
# Copyright (C) 2024, 2025 Ildar Shaimordanov
# MIT License
#
# =========================================================================

ME="${0##*/}"

print_usage() {
	echo "\
Check if qemu agent is configured and command execution is enabled.
Execute a command using qemu agent of the virtual machine.
Enable piping data to STDIN of the virtual machine.
Pass environment variables defined on the host or created in the command line.
Capture STDOUT and STDERR and output them on the host respectively.
Return ExitCode of the command.
Usage:
	$ME [-c|-C|-e ENV[=VALUE] ...] DOMAIN COMMAND [COMMAND_OPTIONS]
"
}

# =========================================================================

data2jsonarr() {
	printf '%s\n' "$@" \
	| jq --raw-input . \
	| jq --compact-output --slurp .
}

# =========================================================================

VM_CMD_GUEST_CHECK_DUMPXML=""
VM_CMD_GUEST_CHECK_COMMANDS=""
VM_CMD_ENVS_RAW=""

while getopts ':e:cC' arg
do
	case "$arg" in
	c )
		VM_CMD_GUEST_CHECK_DUMPXML=1
		;;
	C )
		VM_CMD_GUEST_CHECK_COMMANDS=1
		;;
	e )
		karg="${OPTARG%%=*}"
		varg="${OPTARG#*=}"
		[ "$karg" = "$OPTARG" ] && eval "varg=\"\$$karg\""
		VM_CMD_ENVS_RAW="\
$VM_CMD_ENVS_RAW
$karg=$varg"
		;;
	* )
		echo "$ME: Agrument required for -$OPTARG" >&2
		exit 2
		;;
	esac
done

shift $(( OPTIND-1 ))

[ -n "$VM_CMD_GUEST_CHECK_DUMPXML" ] && [ $# -gt 0 ] && {
	virsh dumpxml "$1" --xpath '//channel[@type="unix"]' --wrap
	exit
}

[ -n "$VM_CMD_GUEST_CHECK_COMMANDS" ] && [ $# -gt 0 ] && {
	virsh qemu-agent-command "$1" '{"execute":"guest-info"}' \
	| jq -c '.return.supported_commands[] | select(.name | test("guest-exec"))'
	exit
}

[ $# -ge 2 ] || {
	print_usage >&2
	exit 1
}

VM_CMD_ENVS='[]'

[ "${#VM_CMD_ENVS_RAW}" -gt 0 ] \
&& VM_CMD_ENVS="$( data2jsonarr "$VM_CMD_ENVS_RAW" )"

VM_NAME="$1"

VM_CMD_PATH="$( jq --null-input --arg a "$2" '$a' )"

VM_CMD_ARGS='[]'

[ $# -gt 2 ] \
&& VM_CMD_ARGS="$(
	shift 2
	data2jsonarr "$@"
)"

VM_CMD_PIPE="$( [ -t 0 ] || base64 -w0 )"

# =========================================================================

virt_qemu_agent() {
	[ -n "$VIRT_EXEC_DEBUG" ] \
	&& set -o xtrace

	virsh qemu-agent-command --domain "$VM_NAME" --cmd "$1"
}

# =========================================================================

# prepared input:
# {"execute":"guest-exec","arguments":{"capture-output":true,"input-data":"STR","path":"STR","arg":[ARR]}}
#
# expected result:
# {"return":{"pid":INT}}

VM_CMD_EXEC="$(
	jq --compact-output . <<-!
	{
		"execute": "guest-exec",
		"arguments": {
			"capture-output": true,
			"env": $VM_CMD_ENVS,
			"input-data": "$VM_CMD_PIPE",
			"path": $VM_CMD_PATH,
			"arg": $VM_CMD_ARGS
		}
	}
	!
)"

VM_CMD_PID="$( virt_qemu_agent "$VM_CMD_EXEC" )" \
|| exit $?

# =========================================================================

# prepared input:
# {"execute": "guest-exec-status","arguments":{"pid":INT}}
#
# expected results:
# {"return":{"exited":false}}
# {"return":{"exited":true,"exitcode":INT,"out-data":STR,"err-data":STR}}
# {"return":{...,"out-truncated":BOOL,"err-truncated":BOOL}}

VM_CMD_STATUS="$(
	jq --compact-output --argjson pid "$VM_CMD_PID" \
	'.arguments.pid = $pid.return.pid' <<-!
	{
		"execute": "guest-exec-status",
		"arguments": {
			"pid": 0
		}
	}
	!
)"

while :
do
	# Prepare used variables
	unset VM_CMD_RETURN_EXITED VM_CMD_RETURN_EXITCODE
	unset VM_CMD_RETURN_OUT_DATA VM_CMD_RETURN_ERR_DATA
	unset VM_CMD_RETURN_OUT_TRUNCATED VM_CMD_RETURN_ERR_TRUNCATED

	# Expand JSON to shell variables VM_CMD_RETURN_*
	eval "$(
		virt_qemu_agent "$VM_CMD_STATUS" \
		| jq --raw-output '
		.return
		| to_entries
		| map(
			"VM_CMD_RETURN_"
			+ (.key | gsub("\\W+"; "_") | ascii_upcase)
			+ "=\""
			+ (.value | tostring)
			+ "\""
		)
		| .[]'
	)"

	[ ${#VM_CMD_RETURN_ERR_DATA} -gt 0 ] \
	&& base64 -di <<-! >&2
	$VM_CMD_RETURN_ERR_DATA
	!

	[ ${#VM_CMD_RETURN_OUT_DATA} -gt 0 ] \
	&& base64 -di <<-!
	$VM_CMD_RETURN_OUT_DATA
	!

	[ "$VM_CMD_RETURN_EXITED" = "true" ] \
	&& [ ${#VM_CMD_RETURN_ERR_TRUNCATED} -eq 0 ] \
	&& [ ${#VM_CMD_RETURN_OUT_TRUNCATED} -eq 0 ] \
	&& break
done

exit "$VM_CMD_RETURN_EXITCODE"

# =========================================================================

# +++
#
# # USAGE
#
# !!! 2>&1
#
# # Requirements
#
# * virsh
# * jq - for handling JSON
# * base64
# * POSIX shell (like Almquist shell) or bash
#
# base64 is required to encode STDIN while preparing "input-data". Also
# it's used to decode "out-data" and "err-data", both captured from
# the virtual machine (due to some Linux are shipped with jq 1.5-1 not
# supporting `@base64d`).
#
# # See Also
#
# * https://www.qemu.org/docs/master/interop/qemu-ga-ref.html
# * https://manpages.ubuntu.com/manpages/bionic/man7/qemu-ga-ref.7.html
# * https://www.libvirt.org/manpages/virsh.html
# * https://github.com/3hedgehogs/qemu-agent-commands
#
# ---

# =========================================================================

# EOF
